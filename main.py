import telebot
import os
import logging
import time
from Classes.classes import Dish
from config import TOKEN, APP_URL
from telebot import types
from help import *
from flask import Flask, request

bot = telebot.TeleBot(TOKEN)
# server = Flask(__name__)
# logger = telebot.logger
# logger.setLevel(logging.DEBUG)
user_dict = {}


@bot.message_handler(commands=['start'])
def welcome(message):
    """Welcoming func with keyboard"""

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    random_dish = types.KeyboardButton("–°–ª—É—á–∞–π–Ω—ã–µ –±–ª—é–¥–∞ üé≤")
    ingredient_search = types.KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º ü•ï")
    name_search = types.KeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é üçú")
    help_button = types.KeyboardButton("–ü–æ–º–æ—â—å‚ùî")

    markup.row(ingredient_search)
    markup.row(name_search)
    markup.row(random_dish, help_button)

    sticker = bot.send_sticker(message.chat.id,
                               'CAACAgIAAxkBAAEDljphzaiW2niuO2kfiNAAAeRxEwZmTBoAAmgWAALJHnBK5-hWJRdKJsUjBA')
    msg = bot.send_message(sticker.chat.id,
                           "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é –µ—Å—Ç—å? –¢–æ–≥–¥–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞!",
                           reply_markup=markup)

    bot.register_next_step_handler(msg, user_choice)


@bot.message_handler(content_types=['text'])
def user_choice(message):
    """Message handler for branches"""

    if message.text == '–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º ü•ï':
        user_dict['select_a'] = []
        user_dict['select_b'] = []
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≥–æ—Ç–æ–≤–∏—Ç—å!")
        bot.register_next_step_handler(msg, product_input)
    elif message.text == '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é üçú':
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ –∏—â–µ—Ç–µ!")
        bot.register_next_step_handler(msg, find_meal)
    elif message.text == '–°–ª—É—á–∞–π–Ω—ã–µ –±–ª—é–¥–∞ üé≤':
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ:", reply_markup=keyboard_for_random())
    elif message.text == '–ü–æ–º–æ—â—å‚ùî':
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=keyboard_for_help())


#                   Branch "Help"
###########################################################


def keyboard_for_help():
    """Keyboard for user to choose category of branches for help"""

    buttons = [
        [types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º", callback_data="products")],
        [types.InlineKeyboardButton(text="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="name")],
        [types.InlineKeyboardButton(text="–í–æ–ø—Ä–æ—Å—ã", callback_data="questions")],
    ]
    return types.InlineKeyboardMarkup(buttons)


@bot.callback_query_handler(func=lambda call: call.data in ['products', 'name', 'questions'])
def bot_help(call):
    """Callback handler for user to choose category of branches for help"""

    if call.data == 'products':
        bot.send_message(call.message.chat.id, products)
    elif call.data == 'name':
        bot.send_message(call.message.chat.id, name)
    elif call.data == 'questions':
        bot.send_message(call.message.chat.id, text="–í–æ–ø—Ä–æ—Å—ã", reply_markup=keyboard_for_questions())
    bot.answer_callback_query(call.id)


def keyboard_for_questions():
    """Keyboard for user to choose category of question for help"""

    buttons = [
        [types.InlineKeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ '–°–ª—É—á–∞–π–Ω—ã–µ –±–ª—é–¥–∞'?", callback_data="random")],
        [types.InlineKeyboardButton(text="–ö–∞–∫–∏–µ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?", callback_data="complexity")],
        [types.InlineKeyboardButton(text="–ö–∞–∫–∏–µ –µ—Å—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è?", callback_data="category")],
        [types.InlineKeyboardButton(text="–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?", callback_data='use bot')]
    ]
    return types.InlineKeyboardMarkup(buttons)


@bot.callback_query_handler(func=lambda call: call.data in ['random', 'complexity', 'category', 'use bot'])
def answer_markup_for_questions(call):
    """Callback handler for user to choose category of question for help"""

    if call.data == 'random':
        bot.send_message(call.message.chat.id, random_dishes)
    elif call.data == 'complexity':
        bot.send_message(call.message.chat.id, complexity)
    elif call.data == 'category':
        bot.send_message(call.message.chat.id, category)
    elif call.data == 'use bot':
        bot.send_message(call.message.chat.id, use_bot)
    bot.answer_callback_query(call.id)


#                   Branch "Products input"
###########################################################


@bot.message_handler(content_types=['text'])
def product_input(message):
    """Message handler for new ingredient"""

    bot.reply_to(message, '–í–æ—Ç –≤–∞—à –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç:')

    search_by_ingredient = Dish()
    search_by_ingredient.ingredient = message.text
    user_dict['ingredient_object'] = search_by_ingredient
    records = search_by_ingredient.get_name_by_ingredient()

    if not records:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –±–ª—é–¥ c —Ç–∞–∫–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(")
    else:
        if not user_dict.get('select_a'):
            user_dict['select_a'] = records
            bot.send_message(message.chat.id, text="–í–≤–æ–¥–∏–º –µ—â—ë –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç?", reply_markup=keyboard_for_ingredients())
        else:
            user_dict['select_b'] = records
            select_c = list(set(user_dict['select_a']) & set(user_dict['select_b']))
            if not select_c:
                bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –±–ª—é–¥ c —Ç–∞–∫–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(")
                user_dict['select_a'].clear()
                user_dict['select_b'].clear()
            else:
                user_dict['select_a'] = select_c
                bot.send_message(message.chat.id, text="–í–≤–æ–¥–∏–º –µ—â—ë –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç?",
                                 reply_markup=keyboard_for_ingredients())


def keyboard_for_ingredients():
    """Keyboard for asking the user to input new ingredient"""

    buttons = [
        [types.InlineKeyboardButton(text="–í–≤–æ–¥–∏—Ç—å –µ—â—ë", callback_data="yes ingredient")],
        [types.InlineKeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", callback_data='no ingredient')]
    ]
    return types.InlineKeyboardMarkup(buttons)


@bot.callback_query_handler(func=lambda call: call.data in ['yes ingredient', 'no ingredient'])
def answer_markup_for_additional_ingredient(call):
    """Callback handler for asking the user to input new ingredient"""

    if call.data == 'no ingredient':
        msg = bot.send_message(call.message.chat.id, "–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É!")
        bot.send_message(msg.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª—é–¥–∞:", reply_markup=keyboard_for_category())
    elif call.data == 'yes ingredient':
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≥–æ—Ç–æ–≤–∏—Ç—å!")
        bot.register_next_step_handler(msg, product_input)
    bot.answer_callback_query(call.id)


def keyboard_for_category():
    """Keyboard for asking the user to choose category"""

    buttons = [
        [types.InlineKeyboardButton(text="–ü–µ—Ä–≤–æ–µ", callback_data='–ü–µ—Ä–≤–æ–µ')],
        [types.InlineKeyboardButton(text="–í—Ç–æ—Ä–æ–µ", callback_data='–í—Ç–æ—Ä–æ–µ')],
        [types.InlineKeyboardButton(text="–ù–∞–ø–∏—Ç–∫–∏", callback_data='–ù–∞–ø–∏—Ç–∫–∏')],
        [types.InlineKeyboardButton(text="–ó–∞–∫—É—Å–∫–∏", callback_data='–ó–∞–∫—É—Å–∫–∏')],
        [types.InlineKeyboardButton(text="–î–µ—Å–µ—Ä—Ç—ã", callback_data='–î–µ—Å–µ—Ä—Ç—ã')]
    ]
    return types.InlineKeyboardMarkup(buttons)


@bot.callback_query_handler(func=lambda call: call.data in ['–ü–µ—Ä–≤–æ–µ', '–í—Ç–æ—Ä–æ–µ', '–ù–∞–ø–∏—Ç–∫–∏', '–ó–∞–∫—É—Å–∫–∏', '–î–µ—Å–µ—Ä—Ç—ã'])
def answer_markup_for_category(call):
    """Callback handler for asking the user to choose category"""

    user_dict['selected_by_name_and_category'] = []

    if user_dict.get('select_a'):
        user_dict['selected_by_ingredient'] = []
        for tupl in user_dict['select_a']:
            user_dict['selected_by_ingredient'].append(tupl)

    if user_dict.get('select_a'):
        user_dict['select_a'].clear()
    if user_dict.get('select_b'):
        user_dict['select_b'].clear()

    if call.data == "–ü–µ—Ä–≤–æ–µ":
        user_dict['ingredient_object'].category = 1
        for pair in user_dict['selected_by_ingredient']:
            user_dict['ingredient_object'].name = pair[0]
            record = user_dict['ingredient_object'].category_check_with_ingredient()
            if record is not None:
                user_dict['selected_by_name_and_category'].append(record[0])
        if not user_dict['selected_by_name_and_category']:
            bot.send_message(call.message.chat.id,
                             "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–ª—é–¥ c —Ç–∞–∫–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(")
        else:
            msg = bot.send_message(call.message.chat.id, "–û–∫–µ–π, –±–µ—Ä—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–ü–µ—Ä–≤–æ–µ'!")
            bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–ª—é–¥–∞:", reply_markup=keyboard_for_complexity())

    elif call.data == "–í—Ç–æ—Ä–æ–µ":
        user_dict['ingredient_object'].category = 2
        for pair in user_dict['selected_by_ingredient']:
            user_dict['ingredient_object'].name = pair[0]
            record = user_dict['ingredient_object'].category_check_with_ingredient()
            if record is not None:
                user_dict['selected_by_name_and_category'].append(record[0])
        if not user_dict['selected_by_name_and_category']:
            bot.send_message(call.message.chat.id,
                             "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–ª—é–¥ c —Ç–∞–∫–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(")
        else:
            msg = bot.send_message(call.message.chat.id, "–û–∫–µ–π, –±–µ—Ä—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–í—Ç–æ—Ä–æ–µ'!")
            bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–ª—é–¥–∞:", reply_markup=keyboard_for_complexity())

    elif call.data == "–ù–∞–ø–∏—Ç–∫–∏":
        user_dict['ingredient_object'].category = 3
        for pair in user_dict['selected_by_ingredient']:
            user_dict['ingredient_object'].name = pair[0]
            record = user_dict['ingredient_object'].category_check_with_ingredient()
            if record is not None:
                user_dict['selected_by_name_and_category'].append(record[0])
        if not user_dict['selected_by_name_and_category']:
            bot.send_message(call.message.chat.id,
                             "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–ª—é–¥ c —Ç–∞–∫–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(")
        else:
            msg = bot.send_message(call.message.chat.id, "–û–∫–µ–π, –±–µ—Ä—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–ù–∞–ø–∏—Ç–∫–∏'!")
            bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–ª—é–¥–∞:", reply_markup=keyboard_for_complexity())

    elif call.data == "–ó–∞–∫—É—Å–∫–∏":
        user_dict['ingredient_object'].category = 4
        for pair in user_dict['selected_by_ingredient']:
            user_dict['ingredient_object'].name = pair[0]
            record = user_dict['ingredient_object'].category_check_with_ingredient()
            if record is not None:
                user_dict['selected_by_name_and_category'].append(record[0])
        if not user_dict['selected_by_name_and_category']:
            bot.send_message(call.message.chat.id,
                             "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–ª—é–¥ c —Ç–∞–∫–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(")
        else:
            msg = bot.send_message(call.message.chat.id, "–û–∫–µ–π, –±–µ—Ä—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–ó–∞–∫—É—Å–∫–∏'!")
            bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–ª—é–¥–∞:", reply_markup=keyboard_for_complexity())

    elif call.data == "–î–µ—Å–µ—Ä—Ç—ã":
        user_dict['ingredient_object'].category = 5
        for pair in user_dict['selected_by_ingredient']:
            user_dict['ingredient_object'].name = pair[0]
            record = user_dict['ingredient_object'].category_check_with_ingredient()
            if record is not None:
                user_dict['selected_by_name_and_category'].append(record[0])
        if not user_dict['selected_by_name_and_category']:
            bot.send_message(call.message.chat.id,
                             "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–ª—é–¥ c —Ç–∞–∫–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(")
        else:
            msg = bot.send_message(call.message.chat.id, "–û–∫–µ–π, –±–µ—Ä—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–î–µ—Å–µ—Ä—Ç—ã'!")
            bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–ª—é–¥–∞:", reply_markup=keyboard_for_complexity())

    bot.answer_callback_query(call.id)


def keyboard_for_complexity():
    """Keyboard for the user to choose complexity"""

    buttons = [
        [types.InlineKeyboardButton(text="–ß–∞–π–Ω–∏–∫", callback_data='easy')],
        [types.InlineKeyboardButton(text="–û–ø—ã—Ç–Ω—ã–π", callback_data='medium')],
        [types.InlineKeyboardButton(text="–ú–∞—Å—Ç–µ—Ä-—à–µ—Ñ", callback_data='hard')]
    ]
    return types.InlineKeyboardMarkup(buttons)


@bot.callback_query_handler(func=lambda call: call.data in ['easy', 'medium', 'hard'])
def answer_markup_for_complexity(call):
    """Callback handler for the user to choose complexity"""

    user_dict['selected_by_name_category_complexity'] = []

    if call.data == 'easy':
        user_dict['ingredient_object'].complexity = 1
        for pair in user_dict['selected_by_name_and_category']:
            user_dict['ingredient_object'].name = pair[0]
            record = user_dict['ingredient_object'].complexity_check()
            if record is not None:
                user_dict['selected_by_name_category_complexity'].append(record[0])
        if not user_dict['selected_by_name_category_complexity']:
            bot.send_message(call.message.chat.id,
                             "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–ª—é–¥ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(")
        else:
            names = get_list_out_of_fetchall(user_dict['selected_by_name_category_complexity'])
            user_dict['found_dishes_by_name'] = names
            bot.send_message(call.message.chat.id, "–í–æ—Ç –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—Ç –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:",
                             reply_markup=dish_names_keyboard(names))

    elif call.data == 'medium':
        user_dict['ingredient_object'].complexity = 2
        for pair in user_dict['selected_by_name_and_category']:
            user_dict['ingredient_object'].name = pair[0]
            record = user_dict['ingredient_object'].complexity_check()
            if record is not None:
                user_dict['selected_by_name_category_complexity'].append(record[0])
        if not user_dict['selected_by_name_category_complexity']:
            bot.send_message(call.message.chat.id,
                             "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–ª—é–¥ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(")
        else:
            names = get_list_out_of_fetchall(user_dict['selected_by_name_category_complexity'])
            user_dict['found_dishes_by_name'] = names
            bot.send_message(call.message.chat.id, "–í–æ—Ç –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—Ç –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:",
                             reply_markup=dish_names_keyboard(names))

    elif call.data == 'hard':
        user_dict['ingredient_object'].complexity = 3
        for pair in user_dict['selected_by_name_and_category']:
            user_dict['ingredient_object'].name = pair[0]
            record = user_dict['ingredient_object'].complexity_check()
            if record is not None:
                user_dict['selected_by_name_category_complexity'].append(record[0])
        if not user_dict['selected_by_name_category_complexity']:
            bot.send_message(call.message.chat.id,
                             "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–ª—é–¥ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(")
        else:
            names = get_list_out_of_fetchall(user_dict['selected_by_name_category_complexity'])
            user_dict['found_dishes_by_name'] = names
            bot.send_message(call.message.chat.id, "–í–æ—Ç –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—Ç –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:",
                             reply_markup=dish_names_keyboard(names))

    bot.answer_callback_query(call.id)


#                   Branch "Name input"
###########################################################


@bot.message_handler(content_types=['text'])
def find_meal(message):
    """Message handler for user to input the name of the dish"""

    bot.reply_to(message, '–í–æ—Ç –≤–∞—à–µ –±–ª—é–¥–æ:')
    search_by_name = Dish()
    search_by_name.name = message.text
    user_dict['dish_by_name_object'] = search_by_name
    records = search_by_name.get_name_by_name()
    names = get_list_out_of_fetchall(records)
    user_dict['found_dishes_by_name'] = names

    if not records:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–µ –±–ª—é–¥–æ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ(")
    else:
        bot.send_message(message.chat.id, text="–í–æ—Ç –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã:",
                         reply_markup=dish_names_keyboard(names))


def get_list_out_of_fetchall(records):
    """Function for getting names out of selection"""

    names = []
    for pair in records:
        names.append(pair[0])
    return names


def dish_names_keyboard(names):
    """Keyboard with all the dishes that have been found"""

    buttons = []
    user_dict['ids'] = []

    for value in names:
        id = Dish.get_id(value)
        buttons.append([types.InlineKeyboardButton(text=value, callback_data=str(id[0][0]))])
        user_dict['ids'].append(str(id[0][0]))

    return types.InlineKeyboardMarkup(buttons)


@bot.callback_query_handler(func=lambda call: call.data in user_dict['ids'])
def answer_markup_for_name(call):
    """Callback handler that gives info of the dish"""

    final_dish = Dish()
    final_dish.id = call.data
    user_dict['dish_by_name_object'] = final_dish
    records = final_dish.get_info_by_id()
    recipe = bot.send_message(call.message.chat.id, text=f'{records[0][0]}\n\n\t–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {records[0][1]}\n\n\t'
                                                         f'–í—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {records[0][3]} –º–∏–Ω—É—Ç\n\n\t'
                                                         f'–ü–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç: {records[0][2]}')
    msg = bot.send_message(recipe.chat.id, text="–í–æ—Ç –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –±–ª—é–¥–æ!")
    bot.send_message(msg.chat.id, text="–ù–∞—á–∏–Ω–∞–µ–º –ø–æ—à–∞–≥–æ–≤—É—é –≥–æ—Ç–æ–≤–∫—É?", reply_markup=keyboard_for_steps())
    bot.answer_callback_query(call.id)


#                          Timer
###########################################################


def keyboard_for_steps():
    """Keyboard for user to choose the way of cooking"""

    buttons = [
        [types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–∏—Ç—å –ø–æ—à–∞–≥–æ–≤–æ", callback_data="start steps")],
        [types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–æ —Ä–µ—Ü–µ–ø—Ç—É", callback_data='no steps')]
    ]
    return types.InlineKeyboardMarkup(buttons)


@bot.callback_query_handler(func=lambda call: call.data in ['start steps', 'no steps'])
def answer_markup_for_recipe(call):
    """Call back handler for user to choose the way of cooking"""

    if call.data == "no steps":
        bot.send_message(call.message.chat.id, "–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ —É–¥–∞—á–Ω–æ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è!")
    elif call.data == "start steps":
        msg = bot.send_message(call.message.chat.id, "–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –ø–æ—à–∞–≥–æ–≤–æ–º—É –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é!")
        user_dict['records'] = user_dict['dish_by_name_object'].get_recipe_and_steps_by_id()
        user_dict['iterator'] = 0
        start_timer(msg, user_dict['records'])
    bot.answer_callback_query(call.id)


def start_timer(message, records):
    """Function that gives the info about current step"""

    if user_dict['iterator'] == len(records):
        bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–∞!")
    else:
        user_dict['step_time'] = records[user_dict['iterator']][1]
        msg = bot.send_message(message.chat.id, "–¢–µ–∫—É—â–∏–π —à–∞–≥ –∑–≤—É—á–∏—Ç —Ç–∞–∫:")
        step_msg = bot.send_message(msg.chat.id, text=records[user_dict['iterator']][0])
        bot.send_message(step_msg.chat.id, text=f"–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ {user_dict['step_time']} –º–∏–Ω—É—Ç?",
                         reply_markup=keyboard_for_timer())


def keyboard_for_timer():
    """Keyboard for user to choose whether the timer is needed"""

    buttons = [
        [types.InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="yes timer")],
        [types.InlineKeyboardButton(text="–ë–µ–∑ —Ç–∞–π–º–µ—Ä–∞", callback_data='no timer')]
    ]
    return types.InlineKeyboardMarkup(buttons)


@bot.callback_query_handler(func=lambda call: call.data in ['yes timer', 'no timer'])
def answer_markup_for_steps(call):
    """Callback handler for user to choose whether the timer is needed
       Starts the timer if tit is needed"""

    user_dict['iterator'] += 1

    if call.data == 'no timer':
        msg = bot.send_message(call.message.chat.id, "–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–µ –±—É–¥–µ—Ç!")
        start_timer(msg, user_dict['records'])
    elif call.data == 'yes timer':
        bot.send_message(call.message.chat.id,
                         f"–ß–µ—Ä–µ–∑ {user_dict['step_time']} –º–∏–Ω—É—Ç –ø—Ä–∏–π–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞!")
        time.sleep(user_dict['step_time'])
        stop_timer_msg = bot.send_message(call.message.chat.id, "–í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ!")
        start_timer(stop_timer_msg, user_dict['records'])


#                   Branch "Random"
###########################################################


def keyboard_for_random():
    """Keyboard for user to choose random dish or package"""

    buttons = [
        [types.InlineKeyboardButton(text="–ü–∞–∫–µ—Ç", callback_data='random package')],
        [types.InlineKeyboardButton(text="–ü–µ—Ä–≤–æ–µ", callback_data='random first')],
        [types.InlineKeyboardButton(text="–í—Ç–æ—Ä–æ–µ", callback_data='random second')],
        [types.InlineKeyboardButton(text="–ù–∞–ø–∏—Ç–∫–∏", callback_data='random drink')],
        [types.InlineKeyboardButton(text="–ó–∞–∫—É—Å–∫–∏", callback_data='random snacks')],
        [types.InlineKeyboardButton(text="–î–µ—Å–µ—Ä—Ç", callback_data='random dessert')]
    ]
    return types.InlineKeyboardMarkup(buttons)


@bot.callback_query_handler(func=lambda call: call.data in ['random package', 'random first', 'random second',
                                                            'random drink', 'random snacks', 'random dessert'])
def answer_markup_for_random(call):
    """Callback handler for user to choose random dish or package"""

    if call.data == "random package":
        msg = bot.send_message(call.message.chat.id, "–í–æ—Ç –≤–∞—à –ø–∞–∫–µ—Ç:")
        get_random_dish(msg, None)
    elif call.data == 'random first':
        msg = bot.send_message(call.message.chat.id, "–í–æ—Ç –≤–∞—à–µ –±–ª—é–¥–æ:")
        get_random_dish(msg, 1)
    elif call.data == 'random second':
        msg = bot.send_message(call.message.chat.id, "–í–æ—Ç –≤–∞—à–µ –±–ª—é–¥–æ:")
        get_random_dish(msg, 2)
    elif call.data == 'random drink':
        msg = bot.send_message(call.message.chat.id, "–í–æ—Ç –≤–∞—à–µ –±–ª—é–¥–æ:")
        get_random_dish(msg, 3)
    elif call.data == 'random snacks':
        msg = bot.send_message(call.message.chat.id, "–í–æ—Ç –≤–∞—à–µ –±–ª—é–¥–æ:")
        get_random_dish(msg, 4)
    elif call.data == 'random dessert':
        msg = bot.send_message(call.message.chat.id, "–í–æ—Ç –≤–∞—à–µ –±–ª—é–¥–æ:")
        get_random_dish(msg, 5)
    bot.answer_callback_query(call.id)


def get_random_dish(message, category_id):
    """Function that gives user needed random dish or packages"""

    category_list = ['–ü–µ—Ä–≤–æ–µ:', '–í—Ç–æ—Ä–æ–µ:', '–ù–∞–ø–∏—Ç–∫–∏:', '–ó–∞–∫—É—Å–∫–∞:', '–î–µ—Å–µ—Ä—Ç:']
    random_dish_object = Dish()

    if category_id:
        ids = Dish.get_random_package(category_id)
        random_dish_object.id = ids[0]
        meal = random_dish_object.get_info_by_id()
        msg = bot.send_message(message.chat.id, category_list[category_id - 1])
        bot.send_message(msg.chat.id, text=f'{meal[0][0]}\n\n\t–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {meal[0][1]}\n\n\t'
                                           f'–í—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {meal[0][3]} –º–∏–Ω—É—Ç\n\n\t'
                                           f'–ü–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç: {meal[0][2]}')
    else:
        ids = [Dish.get_random_package(1), Dish.get_random_package(2), Dish.get_random_package(3),
               Dish.get_random_package(4), Dish.get_random_package(5)]
        for id_tuple, category_tuple in zip(ids, category_list):
            random_dish_object.id = id_tuple[0]
            meal = random_dish_object.get_info_by_id()
            msg = bot.send_message(message.chat.id, category_tuple)
            bot.send_message(msg.chat.id, text=f'{meal[0][0]}\n\n\t–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {meal[0][1]}\n\n\t'
                                               f'–í—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {meal[0][3]} –º–∏–Ω—É—Ç\n\n\t'
                                               f'–ü–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç: {meal[0][2]}')


bot.polling()

# @server.route('/' + TOKEN, methods=['POST'])
# def get_message():
#     json_string = request.get_data().decode("utf-8")
#     update = types.Update.de_json(json_string)
#     bot.process_new_updates([update])
#     return "Ok", 200
#
#
# @server.route('/')
# def webhook():
#     bot.remove_webhook()
#     bot.set_webhook(url=APP_URL)
#     return "Ok", 200
#
#
# if __name__ == '__main__':
#     server.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
